"""
TODO: COPYPASTA para el scrapeo
>>> from imdb import IMDb
>>> ia = IMDb()
>>> results = ia.search_movie('the matrix (1999)')
>>> results
[<Movie id:0133093[http] title:_The Matrix (1999)_>, <Movie id:9710398[http] title:_"Oliver Harper's Retrospectives and Reviews" The Matrix (1999) (2019)_>, <Movie id:5310324[http] title:_"Screen Junkies Movie Fights" Pitch the Matrix Sequel - New Year's Eve 1999!! (2016)_>, <Movie id:0211096[http] title:_V-World Matrix (1999) (V)_>, <Movie id:0701636[http] title:_"At the Movies" The Matrix/10 Things I Hate About You/Cookie's Fortune/The Out-of-Towners/The Dreamlife of Angels (1999)_>, <Movie id:0365467[http] title:_Making 'The Matrix' (1999)_>, <Movie id:0438231[http] title:_The Matrix: The Movie Special (1999) (TV)_>, <Movie id:5319308[http] title:_The Matrix: Follow the White Rabbit (1999) (V)_>, <Movie id:0594933[http] title:_"HBO First Look" The Making of 'The Matrix' (1999)_>]
>>> results[0]
<Movie id:0133093[http] title:_The Matrix (1999)_>
>>> results[0].keys()
['title', 'kind', 'year', 'cover url', 'canonical title', 'long imdb title', 'long imdb canonical title', 'smart canonical title', 'smart long imdb canonical title', 'full-size cover url']
>>> results[0]['year']
1999
>>> results[0]['cover url']
'https://m.media-amazon.com/images/M/MV5BNzQzOTk3OTAtNDQ0Zi00ZTVkLWI0MTEtMDllZjNkYzNjNTc4L2ltYWdlXkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_UX32_CR0,0,32,44_AL_.jpg'
>>> results[0].movieID
'0133093'
URL DEL IMDB: https://www.imdb.com/title/tt0133093/
>>> the_matrix = ia.get_movie('0133093')
>>> the_matrix.keys()
['original title', 'cast', 'genres', 'runtimes', 'countries', 'country codes', 
'language codes', 'color info', 'aspect ratio', 'sound mix', 'box office', 
'certificates', 'original air date', 'rating', 'votes', 'cover url', 
'imdbID', 'plot outline', 'languages', 'title', 'year', 'kind', 
'directors', 'writers', 'producers', 'composers', 'cinematographers', 
'editors', 'editorial department', 'casting directors', 'production designers', 
'art directors', 'set decorators', 'costume designers', 'make up department', 
'production managers', 'assistant directors', 'art department', 'sound department', 
'special effects', 'visual effects', 'stunts', 'camera department', 'animation department', 
'casting department', 'costume departmen', 'location management', 'music department', 
'script department', 'transportation department', 'miscellaneous', 'akas', 'writer', 'director', 
'top 250 rank', 'production companies', 'distributors', 'special effects companies', 'other companies', 
'plot', 'synopsis', 'canonical title', 'long imdb title', 'long imdb canonical title', 'smart canonical title', 
'smart long imdb canonical title', 'full-size cover url']
>>> the_matrix['original title']
'Matrix (1999)'
>>> the_matrix['title']
'The Matrix'
>>> the_matrix['kind']
'movie' # Nos puede servir para diferenciar pelis de series... 
>>> the_matrix['genres']
['Action', 'Sci-Fi']
>>> the_matrix['rating']
8.7
>>> the_matrix['full-size cover url']
'https://m.media-amazon.com/images/M/MV5BNzQzOTk3OTAtNDQ0Zi00ZTVkLWI0MTEtMDllZjNkYzNjNTc4L2ltYWdlXkEyXkFqcGdeQXVyNjU0OTQ0OTY@.jpg'
>>> the_matrix.summary()
'Movie\n=====\nTitle: Matrix, The (1999)\nGenres: Action, Sci-Fi.\nDirector: Lana Wachowski, Lilly Wachowski.\nWriter: Lilly Wachowski, Lana Wachowski.\nCast: Keanu Reeves (Neo), Laurence Fishburne (Morpheus), Carrie-Anne Moss (Trinity), Hugo Weaving (Agent Smith), Gloria Foster (Oracle).\nRuntime: 136.\nCountry: United States.\nLanguage: English.\nRating: 8.7 (1631912 votes).\nPlot: A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.'
>>> series = ia.get_movie('0389564')
>>> series['kind']
'tv series'
>>> series['title']
'The 4400'
>>> the_matrix['director']
[<Person id:0905154[http] name:_Lana Wachowski_>, <Person id:0905152[http] name:_Lilly Wachowski_>]
>>> the_matrix['director'][0].keys()
['name', 'canonical name', 'long imdb name', 'long imdb canonical name']
>>> the_matrix['director'][0]['name']
'Lana Wachowski'
>>> the_matrix['director'][0]['canonical name']
'Wachowski, Lana'
>>> the_matrix['director'][0]['long imdb name']
'Lana Wachowski'
>>> the_matrix['director'][0]['long imdb canonical name']
'Wachowski, Lana'
>>> the_matrix['director'][0].getID()
'0905154'
URL DEL IMDB: https://www.imdb.com/name/nm0905154/
>>> lana = ia.get_person('0905154')
>>> lana.keys()
['birth info', 'headshot', 'akas', 'filmography', 'imdbID', 'name', 'birth name', 'height', 'mini biography', 'spouse', 'trade mark', 'trivia', 'quotes', 'salary history', 'birth date', 'birth notes', 'canonical name', 'long imdb name', 'long imdb canonical name', 'full-size headshot']
>>> lana['headshot']
'https://m.media-amazon.com/images/M/MV5BMjEzMTc2MDQ5OV5BMl5BanBnXkFtZTcwNjkzNDY0OA@@._V1_UX67_CR0,0,67,98_AL_.jpg'
>>> lana['full-size headshot']
'https://m.media-amazon.com/images/M/MV5BMjEzMTc2MDQ5OV5BMl5BanBnXkFtZTcwNjkzNDY0OA@@.jpg'


# Esto no funciona... lamentablemente para poder reactualizar datos en base a lo capturado
>>> from data.models import Movie as DataMovie
>>> # DataMovie.objects.get(id=1).imdb_raw_data
>>> from imdb.helpers import parseXML
>>> the_10k = parseXML(DataMovie.objects.get(id=1).imdb_raw_data)
"""